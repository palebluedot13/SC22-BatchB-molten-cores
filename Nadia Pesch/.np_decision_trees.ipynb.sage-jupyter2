{"backend_state":"running","connection_file":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/.local/share/jupyter/runtime/kernel-fce5b883-e687-4f7e-8d70-78d9ad9cc604.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"end":1657216448093,"exec_count":1,"id":"eb644e","input":"import pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation","kernel":"ds_env","no_halt":true,"pos":0,"start":1657216447193,"state":"done","type":"cell"}
{"end":1657216448326,"exec_count":2,"id":"a9d09f","input":"music_genre = pd.read_csv(\"music_genre.csv\")\ndf = music_genre.copy(deep=True)","kernel":"ds_env","no_halt":true,"pos":1,"start":1657216448107,"state":"done","type":"cell"}
{"end":1657216448448,"exec_count":3,"id":"3e55c1","input":"#dropping columns\nbadInfo = [\"instance_id\",\"obtained_date\",\"artist_name\",\"track_name\"]\ndf.drop(columns=badInfo,axis=1,inplace=True)\n#dropping null rows\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True) #Very good practice to reset how your rows are counted when you drop rows.\n\n#fixing tempo\ndf[\"tempo\"]=df[\"tempo\"].replace(\"?\",np.nan)\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\ndf[\"tempo\"]=df.groupby(\"music_genre\")[\"tempo\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['tempo'] = np.around(df['tempo'],2)\n\n#fixing duration\ndf[\"duration_ms\"]=df[\"duration_ms\"].replace(-1.0,np.nan)\ndf[\"duration_ms\"]=df.groupby(\"music_genre\")[\"duration_ms\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['duration_ms'] = np.around(df['duration_ms'],2)","kernel":"ds_env","no_halt":true,"pos":2,"start":1657216448343,"state":"done","type":"cell"}
{"end":1657216448487,"exec_count":4,"id":"aae09a","input":"df.head(6)","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>key</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n      <th>music_genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>27.0</td>\n      <td>0.00468</td>\n      <td>0.652</td>\n      <td>270703.43</td>\n      <td>0.941</td>\n      <td>0.79200</td>\n      <td>A#</td>\n      <td>0.115</td>\n      <td>-5.201</td>\n      <td>Minor</td>\n      <td>0.0748</td>\n      <td>100.89</td>\n      <td>0.759</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>31.0</td>\n      <td>0.01270</td>\n      <td>0.622</td>\n      <td>218293.00</td>\n      <td>0.890</td>\n      <td>0.95000</td>\n      <td>D</td>\n      <td>0.124</td>\n      <td>-7.043</td>\n      <td>Minor</td>\n      <td>0.0300</td>\n      <td>115.00</td>\n      <td>0.531</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28.0</td>\n      <td>0.00306</td>\n      <td>0.620</td>\n      <td>215613.00</td>\n      <td>0.755</td>\n      <td>0.01180</td>\n      <td>G#</td>\n      <td>0.534</td>\n      <td>-4.617</td>\n      <td>Major</td>\n      <td>0.0345</td>\n      <td>127.99</td>\n      <td>0.333</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>34.0</td>\n      <td>0.02540</td>\n      <td>0.774</td>\n      <td>166875.00</td>\n      <td>0.700</td>\n      <td>0.00253</td>\n      <td>C#</td>\n      <td>0.157</td>\n      <td>-4.498</td>\n      <td>Major</td>\n      <td>0.2390</td>\n      <td>128.01</td>\n      <td>0.270</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32.0</td>\n      <td>0.00465</td>\n      <td>0.638</td>\n      <td>222369.00</td>\n      <td>0.587</td>\n      <td>0.90900</td>\n      <td>F#</td>\n      <td>0.157</td>\n      <td>-6.266</td>\n      <td>Major</td>\n      <td>0.0413</td>\n      <td>145.04</td>\n      <td>0.323</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>47.0</td>\n      <td>0.00523</td>\n      <td>0.755</td>\n      <td>519468.00</td>\n      <td>0.731</td>\n      <td>0.85400</td>\n      <td>D</td>\n      <td>0.216</td>\n      <td>-10.517</td>\n      <td>Minor</td>\n      <td>0.0412</td>\n      <td>125.93</td>\n      <td>0.614</td>\n      <td>Electronic</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   popularity  acousticness  danceability  duration_ms  energy  \\\n0        27.0       0.00468         0.652    270703.43   0.941   \n1        31.0       0.01270         0.622    218293.00   0.890   \n2        28.0       0.00306         0.620    215613.00   0.755   \n3        34.0       0.02540         0.774    166875.00   0.700   \n4        32.0       0.00465         0.638    222369.00   0.587   \n5        47.0       0.00523         0.755    519468.00   0.731   \n\n   instrumentalness key  liveness  loudness   mode  speechiness   tempo  \\\n0           0.79200  A#     0.115    -5.201  Minor       0.0748  100.89   \n1           0.95000   D     0.124    -7.043  Minor       0.0300  115.00   \n2           0.01180  G#     0.534    -4.617  Major       0.0345  127.99   \n3           0.00253  C#     0.157    -4.498  Major       0.2390  128.01   \n4           0.90900  F#     0.157    -6.266  Major       0.0413  145.04   \n5           0.85400   D     0.216   -10.517  Minor       0.0412  125.93   \n\n   valence music_genre  \n0    0.759  Electronic  \n1    0.531  Electronic  \n2    0.333  Electronic  \n3    0.270  Electronic  \n4    0.323  Electronic  \n5    0.614  Electronic  "},"exec_count":4}},"pos":3,"start":1657216448456,"state":"done","type":"cell"}
{"end":1657216448513,"exec_count":5,"id":"c768e0","input":"df[df[\"duration_ms\"] == -1.0].shape","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"(0, 14)"},"exec_count":5}},"pos":4,"start":1657216448496,"state":"done","type":"cell"}
{"end":1657216448552,"exec_count":6,"id":"306b4e","input":"dummies = pd.get_dummies(df[\"mode\"])\ndummies.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Major</th>\n      <th>Minor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Major  Minor\n0      0      1\n1      0      1\n2      1      0\n3      1      0\n4      1      0"},"exec_count":6}},"pos":5,"start":1657216448522,"state":"done","type":"cell"}
{"end":1657216448619,"exec_count":7,"id":"4b4643","input":"df[\"mode\"] = dummies[\"Major\"]\ndf.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>key</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n      <th>music_genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>27.0</td>\n      <td>0.00468</td>\n      <td>0.652</td>\n      <td>270703.43</td>\n      <td>0.941</td>\n      <td>0.79200</td>\n      <td>A#</td>\n      <td>0.115</td>\n      <td>-5.201</td>\n      <td>0</td>\n      <td>0.0748</td>\n      <td>100.89</td>\n      <td>0.759</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>31.0</td>\n      <td>0.01270</td>\n      <td>0.622</td>\n      <td>218293.00</td>\n      <td>0.890</td>\n      <td>0.95000</td>\n      <td>D</td>\n      <td>0.124</td>\n      <td>-7.043</td>\n      <td>0</td>\n      <td>0.0300</td>\n      <td>115.00</td>\n      <td>0.531</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28.0</td>\n      <td>0.00306</td>\n      <td>0.620</td>\n      <td>215613.00</td>\n      <td>0.755</td>\n      <td>0.01180</td>\n      <td>G#</td>\n      <td>0.534</td>\n      <td>-4.617</td>\n      <td>1</td>\n      <td>0.0345</td>\n      <td>127.99</td>\n      <td>0.333</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>34.0</td>\n      <td>0.02540</td>\n      <td>0.774</td>\n      <td>166875.00</td>\n      <td>0.700</td>\n      <td>0.00253</td>\n      <td>C#</td>\n      <td>0.157</td>\n      <td>-4.498</td>\n      <td>1</td>\n      <td>0.2390</td>\n      <td>128.01</td>\n      <td>0.270</td>\n      <td>Electronic</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32.0</td>\n      <td>0.00465</td>\n      <td>0.638</td>\n      <td>222369.00</td>\n      <td>0.587</td>\n      <td>0.90900</td>\n      <td>F#</td>\n      <td>0.157</td>\n      <td>-6.266</td>\n      <td>1</td>\n      <td>0.0413</td>\n      <td>145.04</td>\n      <td>0.323</td>\n      <td>Electronic</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   popularity  acousticness  danceability  duration_ms  energy  \\\n0        27.0       0.00468         0.652    270703.43   0.941   \n1        31.0       0.01270         0.622    218293.00   0.890   \n2        28.0       0.00306         0.620    215613.00   0.755   \n3        34.0       0.02540         0.774    166875.00   0.700   \n4        32.0       0.00465         0.638    222369.00   0.587   \n\n   instrumentalness key  liveness  loudness  mode  speechiness   tempo  \\\n0           0.79200  A#     0.115    -5.201     0       0.0748  100.89   \n1           0.95000   D     0.124    -7.043     0       0.0300  115.00   \n2           0.01180  G#     0.534    -4.617     1       0.0345  127.99   \n3           0.00253  C#     0.157    -4.498     1       0.2390  128.01   \n4           0.90900  F#     0.157    -6.266     1       0.0413  145.04   \n\n   valence music_genre  \n0    0.759  Electronic  \n1    0.531  Electronic  \n2    0.333  Electronic  \n3    0.270  Electronic  \n4    0.323  Electronic  "},"exec_count":7}},"pos":6,"start":1657216448564,"state":"done","type":"cell"}
{"end":1657216448672,"exec_count":8,"id":"5030c5","input":"df['music_genre_codes'] = df['music_genre'].map({'Electronic': 0, 'Anime': 1, 'Jazz': 2, 'Alternative': 3, 'Country': 4, 'Rap': 5, 'Blues': 6, 'Rock': 7, 'Classical': 8, 'Hip-Hop': 9})","kernel":"ds_env","no_halt":true,"pos":7,"start":1657216448624,"state":"done","type":"cell"}
{"end":1657216448713,"exec_count":9,"id":"10a3e6","input":"df.drop(['music_genre'], axis=1, inplace=True)","kernel":"ds_env","no_halt":true,"pos":8,"start":1657216448687,"state":"done","type":"cell"}
{"end":1657216448743,"exec_count":10,"id":"3ed839","input":"df.drop(['key'], axis=1,inplace=True)\ndf.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n      <th>music_genre_codes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>27.0</td>\n      <td>0.00468</td>\n      <td>0.652</td>\n      <td>270703.43</td>\n      <td>0.941</td>\n      <td>0.79200</td>\n      <td>0.115</td>\n      <td>-5.201</td>\n      <td>0</td>\n      <td>0.0748</td>\n      <td>100.89</td>\n      <td>0.759</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>31.0</td>\n      <td>0.01270</td>\n      <td>0.622</td>\n      <td>218293.00</td>\n      <td>0.890</td>\n      <td>0.95000</td>\n      <td>0.124</td>\n      <td>-7.043</td>\n      <td>0</td>\n      <td>0.0300</td>\n      <td>115.00</td>\n      <td>0.531</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28.0</td>\n      <td>0.00306</td>\n      <td>0.620</td>\n      <td>215613.00</td>\n      <td>0.755</td>\n      <td>0.01180</td>\n      <td>0.534</td>\n      <td>-4.617</td>\n      <td>1</td>\n      <td>0.0345</td>\n      <td>127.99</td>\n      <td>0.333</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>34.0</td>\n      <td>0.02540</td>\n      <td>0.774</td>\n      <td>166875.00</td>\n      <td>0.700</td>\n      <td>0.00253</td>\n      <td>0.157</td>\n      <td>-4.498</td>\n      <td>1</td>\n      <td>0.2390</td>\n      <td>128.01</td>\n      <td>0.270</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32.0</td>\n      <td>0.00465</td>\n      <td>0.638</td>\n      <td>222369.00</td>\n      <td>0.587</td>\n      <td>0.90900</td>\n      <td>0.157</td>\n      <td>-6.266</td>\n      <td>1</td>\n      <td>0.0413</td>\n      <td>145.04</td>\n      <td>0.323</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   popularity  acousticness  danceability  duration_ms  energy  \\\n0        27.0       0.00468         0.652    270703.43   0.941   \n1        31.0       0.01270         0.622    218293.00   0.890   \n2        28.0       0.00306         0.620    215613.00   0.755   \n3        34.0       0.02540         0.774    166875.00   0.700   \n4        32.0       0.00465         0.638    222369.00   0.587   \n\n   instrumentalness  liveness  loudness  mode  speechiness   tempo  valence  \\\n0           0.79200     0.115    -5.201     0       0.0748  100.89    0.759   \n1           0.95000     0.124    -7.043     0       0.0300  115.00    0.531   \n2           0.01180     0.534    -4.617     1       0.0345  127.99    0.333   \n3           0.00253     0.157    -4.498     1       0.2390  128.01    0.270   \n4           0.90900     0.157    -6.266     1       0.0413  145.04    0.323   \n\n   music_genre_codes  \n0                  0  \n1                  0  \n2                  0  \n3                  0  \n4                  0  "},"exec_count":10}},"pos":10,"start":1657216448725,"state":"done","type":"cell"}
{"end":1657216448755,"exec_count":11,"id":"df7efb","input":"df.columns","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"Index(['popularity', 'acousticness', 'danceability', 'duration_ms', 'energy',\n       'instrumentalness', 'liveness', 'loudness', 'mode', 'speechiness',\n       'tempo', 'valence', 'music_genre_codes'],\n      dtype='object')"},"exec_count":11}},"pos":11,"start":1657216448747,"state":"done","type":"cell"}
{"end":1657216448774,"exec_count":12,"id":"038943","input":"#feature_cols = [df.columns]","kernel":"ds_env","no_halt":true,"pos":12,"start":1657216448765,"state":"done","type":"cell"}
{"end":1657216448788,"exec_count":13,"id":"6e9b3f","input":"target = df[\"music_genre_codes\"]","kernel":"ds_env","no_halt":true,"pos":13,"start":1657216448785,"state":"done","type":"cell"}
{"end":1657216448805,"exec_count":14,"id":"b7f2d9","input":"input_columns = df.loc[:, df.columns != \"music_genre_codes\"]","kernel":"ds_env","no_halt":true,"pos":14,"start":1657216448799,"state":"done","type":"cell"}
{"end":1657216448833,"exec_count":15,"id":"7f503d","input":"X_train, X_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2, random_state=1) # 80% training and 20% test","kernel":"ds_env","no_halt":true,"pos":16,"start":1657216448810,"state":"done","type":"cell"}
{"end":1657216449485,"exec_count":16,"id":"2f04e1","input":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)","kernel":"ds_env","no_halt":true,"pos":17,"start":1657216448841,"state":"done","type":"cell"}
{"end":1657216449512,"exec_count":17,"id":"668dd8","input":"y_pred = clf.predict(X_test)","kernel":"ds_env","no_halt":true,"pos":18,"start":1657216449511,"state":"done","type":"cell"}
{"end":1657216449529,"exec_count":18,"id":"3f6c1e","input":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Accuracy: 0.4653\n"}},"pos":22,"start":1657216449519,"state":"done","type":"cell"}
{"end":1657216451199,"exec_count":19,"id":"69302e","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":19},"1":{"data":{"image/png":"d4243d0d9f82e6bed4c34a98bbd4a5d1b3b86c0f","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":23,"start":1657216449549,"state":"done","type":"cell"}
{"end":1657216453046,"exec_count":20,"id":"e0ee5a","input":"pip install graphviz","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Requirement already satisfied: graphviz in /projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages (0.20)\r\n"},"1":{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n"}},"pos":24,"start":1657216451214,"state":"done","type":"cell"}
{"end":1657216454858,"exec_count":21,"id":"bfabd8","input":"pip install pydotplus","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Requirement already satisfied: pydotplus in /projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages (2.0.2)\r\nRequirement already satisfied: pyparsing>=2.0.1 in /projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages (from pydotplus) (3.0.4)\r\n"},"1":{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n"}},"pos":25,"start":1657216453054,"state":"done","type":"cell"}
{"end":1657216454896,"exec_count":22,"id":"2a31d1","input":"from sklearn.tree import export_graphviz\nfrom six import StringIO\nfrom IPython.display import Image\nimport pydotplus","kernel":"ds_env","no_halt":true,"pos":26,"start":1657216454872,"state":"done","type":"cell"}
{"end":1657216455958,"exec_count":23,"id":"96e79e","input":"dot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True,feature_names = input_columns,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('diabetes.png')\nImage(graph.create_png())","kernel":"ds_env","no_halt":true,"output":{"0":{"ename":"ValueError","evalue":"Length of feature_names, 50000 does not match number of features, 12","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [23]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m dot_data \u001b[38;5;241m=\u001b[39m StringIO()\n\u001b[0;32m----> 2\u001b[0m \u001b[43mexport_graphviz\u001b[49m\u001b[43m(\u001b[49m\u001b[43mclf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout_file\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdot_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m                \u001b[49m\u001b[43mfilled\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrounded\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[43m                \u001b[49m\u001b[43mspecial_characters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43mfeature_names\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43minput_columns\u001b[49m\u001b[43m,\u001b[49m\u001b[43mclass_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m0\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m1\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m graph \u001b[38;5;241m=\u001b[39m pydotplus\u001b[38;5;241m.\u001b[39mgraph_from_dot_data(dot_data\u001b[38;5;241m.\u001b[39mgetvalue())  \n\u001b[1;32m      6\u001b[0m graph\u001b[38;5;241m.\u001b[39mwrite_png(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdiabetes.png\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_export.py:889\u001b[0m, in \u001b[0;36mexport_graphviz\u001b[0;34m(decision_tree, out_file, max_depth, feature_names, class_names, label, filled, leaves_parallel, impurity, node_ids, proportion, rotate, rounded, special_characters, precision, fontname)\u001b[0m\n\u001b[1;32m    870\u001b[0m     out_file \u001b[38;5;241m=\u001b[39m StringIO()\n\u001b[1;32m    872\u001b[0m exporter \u001b[38;5;241m=\u001b[39m _DOTTreeExporter(\n\u001b[1;32m    873\u001b[0m     out_file\u001b[38;5;241m=\u001b[39mout_file,\n\u001b[1;32m    874\u001b[0m     max_depth\u001b[38;5;241m=\u001b[39mmax_depth,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    887\u001b[0m     fontname\u001b[38;5;241m=\u001b[39mfontname,\n\u001b[1;32m    888\u001b[0m )\n\u001b[0;32m--> 889\u001b[0m \u001b[43mexporter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexport\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdecision_tree\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    891\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_string:\n\u001b[1;32m    892\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m exporter\u001b[38;5;241m.\u001b[39mout_file\u001b[38;5;241m.\u001b[39mgetvalue()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_export.py:452\u001b[0m, in \u001b[0;36m_DOTTreeExporter.export\u001b[0;34m(self, decision_tree)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_names \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    451\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_names) \u001b[38;5;241m!=\u001b[39m decision_tree\u001b[38;5;241m.\u001b[39mn_features_in_:\n\u001b[0;32m--> 452\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    453\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength of feature_names, \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m does not match number of features, \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    454\u001b[0m             \u001b[38;5;241m%\u001b[39m (\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeature_names), decision_tree\u001b[38;5;241m.\u001b[39mn_features_in_)\n\u001b[1;32m    455\u001b[0m         )\n\u001b[1;32m    456\u001b[0m \u001b[38;5;66;03m# each part writes to out_file\u001b[39;00m\n\u001b[1;32m    457\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhead()\n","\u001b[0;31mValueError\u001b[0m: Length of feature_names, 50000 does not match number of features, 12"]}},"pos":27,"start":1657216454906,"state":"done","type":"cell"}
{"id":"40a9b6","input":"","pos":5.5,"type":"cell"}
{"id":"e67f95","input":"","pos":7.5,"type":"cell"}
{"id":"f49cee","input":"","pos":28,"type":"cell"}
{"id":"f608fa","input":"","pos":15,"type":"cell"}
{"id":0,"time":1657216430821,"type":"user"}
{"last_load":1657127939746,"type":"file"}