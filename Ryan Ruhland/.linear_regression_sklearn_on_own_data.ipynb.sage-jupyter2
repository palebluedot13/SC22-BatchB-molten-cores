{"backend_state":"running","connection_file":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/.local/share/jupyter/runtime/kernel-a25437e7-d2dc-4ad4-8cb8-e73e49c4d3f6.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657033336149,"exec_count":1,"id":"98a15c","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1657033335620,"state":"done","type":"cell"}
{"cell_type":"code","end":1657033340493,"exec_count":2,"id":"9209ca","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"start":1657033340469,"state":"done","type":"cell"}
{"cell_type":"code","end":1657033350729,"exec_count":3,"id":"b33d3f","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","kernel":"python3-ubuntu","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"start":1657033350716,"state":"done","type":"cell"}
{"cell_type":"code","end":1657033362882,"exec_count":4,"id":"961010","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"python3-ubuntu","metadata":{"id":"WW77IzOwZaKp"},"pos":11,"start":1657033362880,"state":"done","type":"cell"}
{"cell_type":"code","end":1657033388320,"exec_count":5,"id":"8f86ea","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","metadata":{"id":"wKS4pvcEsLOF"},"pos":15,"start":1657033388313,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"bbb148","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"b950e0","input":"print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.5521119941691088\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"967139","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"8.032342736247434"},"execution_count":13,"metadata":{},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"47604b","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"ename":"NameError","evalue":"name 'y_hat' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-2e3040016c56>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#plotting results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'y_hat' is not defined"]},"1":{"data":{"text/plain":"<Figure size 720x360 with 0 Axes>"}}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f3919d","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"execution_count":3,"metadata":{},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"64ac0b","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ff962406c70>"},"execution_count":5,"metadata":{},"output_type":"execute_result"},"1":{"data":{"image/png":"","text/plain":"<Figure size 864x504 with 2 Axes>"},"execution_count":5,"metadata":{"image/png":{"height":415,"width":714},"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d47f49","input":"sns.heatmap(my_data.corr())","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"0afdb7ea88e663b1d2b006d7c5528ae073007949","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":415,"width":714},"needs_background":"light"}}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"d9d91c","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"","text/plain":"<Figure size 720x360 with 2 Axes>"},"execution_count":8,"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"87a74f","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[40.87310476] [-0.16473877]\n"}},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"02f9e0","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"2f47ed","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"33d6f9","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"357919","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"6a276f","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"890895","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"d86ac1","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e9f6b5","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"ee5b62","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"ee65ca","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"f6be09","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"f75e03","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"fd4109","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":19,"type":"cell"}
{"end":1657033537047,"exec_count":7,"id":"a2ce62","input":"my_data.head()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":7}},"pos":25.5,"start":1657033537031,"state":"done","type":"cell"}
{"end":1657033943563,"exec_count":14,"id":"65909e","input":"X = my_data[\"weight\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"python3-ubuntu","pos":27,"start":1657033943548,"state":"done","type":"cell"}
{"end":1657033945288,"exec_count":15,"id":"8214ea","input":"idx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\n\n\n#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"ee245188b50abc0653a841a9a75a26a0efedf3f1","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":620},"needs_background":"light"}}},"pos":28,"start":1657033944797,"state":"done","type":"cell"}
{"end":1657034053704,"exec_count":16,"id":"e05183","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[46.17159255] [-0.00759348]\n"}},"pos":29,"start":1657034053534,"state":"done","type":"cell"}
{"end":1657034324691,"exec_count":19,"id":"aec909","input":"y_hat = linr.predict(x_test)\n\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"cd1d09bf2f78ae6b8c4487cb48c8f78538d6aa72","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":30,"start":1657034324227,"state":"done","type":"cell"}
{"end":1657034336599,"exec_count":20,"id":"567b59","input":"print(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"0.6602980671292313\n"},"1":{"data":{"text/plain":"7.655065304069725"},"exec_count":20}},"pos":31,"start":1657034336590,"state":"done","type":"cell"}
{"end":1657035915482,"exec_count":33,"id":"7946fb","input":"X = my_data[\"model_year\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\nnp.random.seed(42)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"5ff75fab194364923f5f52d1d0e75522d94e0492","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}},"1":{"name":"stdout","text":"0.25347328880917586\n"},"2":{"data":{"text/plain":"6.973761435380685"},"exec_count":33}},"pos":35,"start":1657035915060,"state":"done","type":"cell"}
{"end":1657035942556,"exec_count":35,"id":"aaea7c","input":"X = my_data[\"cylinders\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\nnp.random.seed(42)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"0.5878696901332799\n"},"1":{"data":{"text/plain":"7.677099545296179"},"exec_count":35}},"pos":34,"start":1657035942543,"state":"done","type":"cell"}
{"end":1657036167234,"exec_count":41,"id":"4ffbfc","input":"X = my_data[\"weight\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\nnp.random.seed(42)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"6610e6064ecf4d399bfc5d4e9c0350b39b8860a5","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}},"1":{"name":"stdout","text":"0.725170382781656\n"},"2":{"data":{"text/plain":"7.810075008215937"},"exec_count":41}},"pos":36,"start":1657036166888,"state":"done","type":"cell"}
{"end":1657036385142,"exec_count":56,"id":"25b919","input":"X = my_data[\"acceleration\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\nnp.random.seed(42)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"4277639e05eebf6f5303d8b6814312fac230e335","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}},"1":{"name":"stdout","text":"-9.702662555288732e-05\n"},"2":{"data":{"text/plain":"6.876150684391704"},"exec_count":56}},"pos":32,"scrolled":true,"start":1657036384373,"state":"done","type":"cell"}
{"end":1657036444920,"exec_count":57,"id":"5ad0f8","input":"X = my_data[\"acceleration\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"4277639e05eebf6f5303d8b6814312fac230e335","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}},"1":{"name":"stdout","text":"-9.702662555288732e-05\n"},"2":{"data":{"text/plain":"6.876150684391704"},"exec_count":57}},"pos":32.5,"start":1657036444586,"state":"done","type":"cell"}
{"end":1657036692596,"exec_count":58,"id":"53834d","input":"X = my_data[\"displacement\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\nnp.random.seed(42)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\n\nfrom sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\n\ny_hat = linr.predict(x_test)\n\nprint(linr.score(x_test, y_test))\n\nMAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"0.6952475943482758\n"},"1":{"data":{"text/plain":"8.576619110703012"},"exec_count":58}},"pos":33,"start":1657036692583,"state":"done","type":"cell"}
{"id":0,"time":1657036250077,"type":"user"}
{"last_load":1657033318199,"type":"file"}