{"backend_state":"running","connection_file":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/.local/share/jupyter/runtime/kernel-2bd6612b-0713-4032-99df-6da9acbf065b.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"end":1657219715643,"exec_count":155,"id":"80b712","input":"#imports\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\nimport seaborn as sns\nimport plotly.io as pio\nimport numpy as np\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import make_scorer, f1_score, accuracy_score, confusion_matrix, classification_report,roc_curve, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\n\n#importing datasets\nmusic_data = pd.read_csv(\"music_genre.csv\")\ndf = music_data.copy(deep=True)\n\n#makes theme dark for all ploty visuals\npio.templates.default = \"plotly_dark\"\n\n\n\n\n\n#dropping irrelevent columns\nbadInfo = [\"instance_id\",\"obtained_date\",\"artist_name\",\"track_name\"]\ndf.drop(columns=badInfo,axis=1,inplace=True)\n\n#dropping null rows\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True) #Very good practice to reset how your rows are counted when you drop rows.\n\n#fixing tempo\ndf[\"tempo\"]=df[\"tempo\"].replace(\"?\",np.nan)\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\ndf[\"tempo\"]=df.groupby(\"music_genre\")[\"tempo\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\n\n#fixing duration\ndf[\"duration_ms\"]=df[\"duration_ms\"].replace(-1.0,np.nan)\ndf[\"duration_ms\"]=df.groupby(\"music_genre\")[\"duration_ms\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['duration_ms'] = np.around(df['duration_ms'],2)","kernel":"ds_env","pos":0,"scrolled":true,"start":1657219715208,"state":"done","type":"cell"}
{"end":1657219717383,"exec_count":156,"id":"d121bd","input":"#creating dummy variables for categorical variables\ndummies = pd.get_dummies(df[\"key\"])\ndf[\"A\"] = dummies[\"A\"]\ndf[\"B\"] = dummies[\"B\"]\ndf[\"C\"] = dummies[\"C\"]\ndf[\"D\"] = dummies[\"D\"]\ndf[\"E\"] = dummies[\"E\"]\ndf[\"F\"] = dummies[\"F\"]\ndf[\"G\"] = dummies[\"G\"]\ndf[\"A#\"] = dummies[\"A#\"]\ndf[\"C#\"] = dummies[\"C#\"]\ndf[\"D#\"] = dummies[\"D#\"]\ndf[\"F#\"] = dummies[\"F#\"]\ndf[\"G#\"] = dummies[\"G#\"]\ndf.drop(\"key\", axis = 1, inplace = True)\n\ndummies = pd.get_dummies(df[\"mode\"])\ndf[\"Major\"] = dummies[\"Major\"]\ndf[\"Minor\"] = dummies[\"Minor\"]\ndf.drop(\"mode\", axis = 1, inplace = True)\n\ndummies = pd.get_dummies(df[\"music_genre\"])\ndf[\"Electronic\"] = dummies[\"Electronic\"]\ndf[\"Anime\"] = dummies[\"Anime\"]\ndf[\"Jazz\"] = dummies[\"Jazz\"]\ndf[\"Alternative\"] = dummies[\"Alternative\"]\ndf[\"Country\"] = dummies[\"Country\"]\ndf[\"Rap\"] = dummies[\"Rap\"]\ndf[\"Blues\"] = dummies[\"Blues\"]\ndf[\"Rock\"] = dummies[\"Rock\"]\ndf[\"Classical\"] = dummies[\"Classical\"]\ndf[\"Hip-Hop\"] = dummies[\"Hip-Hop\"]\ndf.drop(\"music_genre\", axis = 1, inplace = True)","kernel":"ds_env","pos":2,"start":1657219717301,"state":"done","type":"cell"}
{"end":1657219789816,"exec_count":158,"id":"72739a","input":"labels = ['Electronic', 'Anime', 'Jazz', 'Alternative', 'Country', 'Rap', 'Blues', 'Rock', 'Classical', 'Hip-Hop']\nsns.heatmap(confusion_matrix(y_test.values.argmax(axis=1), y_pred.argmax(axis=1)), annot=True, fmt='g', xticklabels=labels, yticklabels=labels)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":158},"1":{"data":{"image/png":"be77ae45742793e54bdb8a6f7489efe211a12eb4","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":4,"start":1657219789135,"state":"done","type":"cell"}
{"exec_count":157,"id":"e9b000","input":"genre_list = ['Electronic', 'Anime', 'Jazz', 'Alternative', 'Country', 'Rap', 'Blues', 'Rock', 'Classical', 'Hip-Hop']\ntarget = pd.get_dummies(dummies)\ninput_columns = df.iloc[:,:-10]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, train_size=0.8)\nscaler = preprocessing.StandardScaler().fit(x_train)\nx_train_scaled = scaler.transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n\n#use_label_encoder=False, eval_metric='mlogloss'\nmodel = XGBClassifier(booster='gbtree')\nmodel.fit(x_train_scaled, y_train)\n\ny_pred = model.predict(x_test_scaled)\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Overall Accuracy: \", accuracy)\n\ntotal_squared_error = (np.sum((y_test - y_pred)**2))\nmean_squared_error = total_squared_error/len(y_test)\nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Overall Accuracy:  0.5002\nAlternative    0.0823\nAnime          0.0330\nBlues          0.0597\nClassical      0.0256\nCountry        0.0643\nElectronic     0.0521\nHip-Hop        0.1026\nJazz           0.0708\nRap            0.0991\nRock           0.0769\ndtype: float64\n"}},"pos":3,"state":"done","type":"cell"}
{"id":0,"time":1657219329187,"type":"user"}
{"last_load":1657127602446,"type":"file"}