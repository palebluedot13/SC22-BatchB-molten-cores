{"backend_state":"running","connection_file":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/.local/share/jupyter/runtime/kernel-8f67b747-9d0e-4ba0-8c5c-966b497d1d97.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657204402829,"exec_count":4,"id":"96864d","input":"df.plot(x='artist_name', y='popularity')\n\nplt.show()\n","kernel":"ds_env","output":{"0":{"data":{"image/png":"d6fcc86a68ea247695d55f34557c56eae23c139a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":9,"start":1657204402274,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204403376,"exec_count":5,"id":"af6782","input":"# Plots the numeric energy of the tempo.\n\ndf.plot(x='tempo', y = 'energy')\nplt.show()","kernel":"ds_env","output":{"0":{"data":{"image/png":"548db4ef6ac608e0dbd1cb6b60d601af8e73b37d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":10,"start":1657204402879,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204403935,"exec_count":6,"id":"7bf6fa","input":"\n#fig = px.scatter(df, x='popularity', y= 'key')\n#fig.show()","kernel":"ds_env","pos":13,"scrolled":true,"start":1657204403921,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204404601,"exec_count":7,"id":"bbc0fa","input":"#fig = px.scatter(df, x='key', y= 'popularity')\n#fig.show()","kernel":"ds_env","pos":14,"scrolled":true,"start":1657204404595,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204405171,"exec_count":8,"id":"179746","input":"#fig3 = px.scatter(df, x='energy', y = 'popularity')\n#fig3.show()","kernel":"ds_env","pos":15,"start":1657204405161,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204405596,"exec_count":9,"id":"414ac6","input":"#fig4 = px.scatter(df, x='tempo', y = 'popularity')\n#fig4.show()","kernel":"ds_env","pos":16,"start":1657204405588,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204407054,"exec_count":10,"id":"16c39f","input":"#fig2 = px.bar(df, x='key', y = 'popularity')\n#fig2.show()","kernel":"ds_env","pos":19,"start":1657204407049,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204407542,"exec_count":11,"id":"c087af","input":"#fig6 = px.bar(df, x='tempo', y = 'popularity')\n#fig6.show()","kernel":"ds_env","pos":20,"start":1657204407536,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204409009,"exec_count":12,"id":"7510c7","input":"\n#sns.set_style('darkgrid')\n#plt.figure(figsize=(20, 15))\n#plt.plot(df['popularity'], music_dataframe['liveness'], marker = 'x')\n","kernel":"ds_env","pos":23,"start":1657204408995,"state":"done","type":"cell"}
{"cell_type":"code","end":1657204431403,"exec_count":16,"id":"5495f8","input":"from sklearn.ensemble import RandomForestClassifier\n\n\ntst = RandomForestClassifier(max_depth=2, random_state=0)\n\ntst.fit(x_train_m, y_train_m)\n\nprint(clf.predict([]))","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'x_train_m' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [16]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mensemble\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m RandomForestClassifier\n\u001b[1;32m      4\u001b[0m tst \u001b[38;5;241m=\u001b[39m RandomForestClassifier(max_depth\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m----> 6\u001b[0m tst\u001b[38;5;241m.\u001b[39mfit(\u001b[43mx_train_m\u001b[49m, y_train_m)\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(clf\u001b[38;5;241m.\u001b[39mpredict([]))\n","\u001b[0;31mNameError\u001b[0m: name 'x_train_m' is not defined"]}},"pos":27,"start":1657204431386,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216536388,"exec_count":5,"id":"30a677","input":"\n#dropping columns\nbadInfo = [\"instance_id\",\"obtained_date\",\"artist_name\",\"track_name\"]\ndf.drop(columns=badInfo,axis=1,inplace=True)\n#dropping null rows\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True) #Very good practice to reset how your rows are counted when you drop rows.\n\n#fixing tempo\ndf[\"tempo\"]=df[\"tempo\"].replace(\"?\",np.nan)\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\ndf[\"tempo\"]=df.groupby(\"music_genre\")[\"tempo\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['tempo'] = np.around(df['tempo'],2)\n\n#fixing duration\ndf[\"duration_ms\"]=df[\"duration_ms\"].replace(-1.0,np.nan)\ndf[\"duration_ms\"]=df.groupby(\"music_genre\")[\"duration_ms\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['duration_ms'] = np.around(df['duration_ms'],2)","kernel":"ds_env","output":{"0":{"ename":"KeyError","evalue":"\"['instance_id', 'obtained_date', 'artist_name', 'track_name'] not found in axis\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [5]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#dropping columns\u001b[39;00m\n\u001b[1;32m      2\u001b[0m badInfo \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124minstance_id\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobtained_date\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124martist_name\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrack_name\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m----> 3\u001b[0m \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbadInfo\u001b[49m\u001b[43m,\u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m#dropping null rows\u001b[39;00m\n\u001b[1;32m      5\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/util/_decorators.py:311\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    306\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    307\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39marguments),\n\u001b[1;32m    308\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    309\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mstacklevel,\n\u001b[1;32m    310\u001b[0m     )\n\u001b[0;32m--> 311\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:4954\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4806\u001b[0m \u001b[38;5;129m@deprecate_nonkeyword_arguments\u001b[39m(version\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, allowed_args\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mself\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlabels\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m   4807\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   4808\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4815\u001b[0m     errors: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   4816\u001b[0m ):\n\u001b[1;32m   4817\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4818\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   4819\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4952\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   4953\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4954\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4955\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4956\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4957\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4958\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4959\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4960\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4961\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4962\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/generic.py:4267\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4265\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4266\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4267\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4269\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4270\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/generic.py:4311\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, consolidate, only_slice)\u001b[0m\n\u001b[1;32m   4309\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4310\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4311\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4312\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4314\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4315\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:6644\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6642\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   6643\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 6644\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6645\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   6646\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n","\u001b[0;31mKeyError\u001b[0m: \"['instance_id', 'obtained_date', 'artist_name', 'track_name'] not found in axis\""]}},"pos":25,"start":1657216531753,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216562269,"exec_count":1,"id":"2f0a04","input":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","pos":2,"start":1657216560186,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216569928,"exec_count":2,"id":"afb8d6","input":"# The data_frame output.\ndf = pd.read_csv('music_genre.csv')","kernel":"ds_env","pos":5,"scrolled":true,"start":1657216569710,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216583763,"exec_count":3,"id":"cbdbfb","input":"# Column names:\n\ndf.columns\n#dropping columns\nbadInfo = ['instance_id','obtained_date','artist_name','track_name']\ndf.drop(columns=badInfo,axis=1,inplace=True)\n#dropping null rows\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True) #Very good practice to reset how your rows are counted when you drop rows.\n\n#fixing tempo\ndf[\"tempo\"]=df[\"tempo\"].replace(\"?\",np.nan)\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\ndf[\"tempo\"]=df.groupby(\"music_genre\")[\"tempo\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['tempo'] = np.around(df['tempo'],2)\n\n#fixing duration\ndf[\"duration_ms\"]=df[\"duration_ms\"].replace(-1.0,np.nan)\ndf[\"duration_ms\"]=df.groupby(\"music_genre\")[\"duration_ms\"].transform(lambda x: x.fillna(x.mean(skipna=True)))\ndf['duration_ms'] = np.around(df['duration_ms'],2)\n\n#dummys\ndummiesKey = pd.get_dummies(df[\"key\"])\ndummiesMode = pd.get_dummies(df[\"mode\"])\n# df['key']=","kernel":"ds_env","pos":6,"start":1657216583639,"state":"done","type":"cell"}
{"cell_type":"code","end":1657216623913,"exec_count":4,"id":"1be024","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\ntarget = df[\"tempo\"]\nx_train, x_test, y_train, y_test = train_test_split(df, target, test_size=0.2)","kernel":"ds_env","pos":26,"start":1657216623893,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0433ce","input":"# ____________________________________________________________________________________________________","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"05d90e","input":"## Bar","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"07448a","input":"## Data Frame Table","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3d4d06","input":"# ____________________________________________________________________________________________________","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5217b8","input":"# ____________________________________________________________________________________________________\n\n","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"605900","input":"# ____________________________________________________________________________________________________\n\n","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8df418","input":"# ____________________________________________________________________________________________________","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"933115","input":"# ____________________________________________________________________________________________________","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a86242","input":"## Scatter","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b29111","input":"## 2D","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cd70f2","input":"## Python Libraries\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d2f4ab","input":"# ____________________________________________________________________________________________________","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d72af1","input":"# Working Code","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ecbaa9","input":"## Plot","pos":8,"state":"done","type":"cell"}
{"end":1657213917672,"exec_count":52,"id":"b08b6c","input":"X_train_scaled","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([[ 1.27136225, -0.74410806,  2.16924241, ...,  0.27392288,\n        -0.09884268,  1.15989733],\n       [-0.91280543,  2.01011483, -1.98749366, ..., -0.38745443,\n        -0.59478748, -1.70566796],\n       [-0.39888362, -0.47507458,  0.08248258, ..., -0.41418674,\n         0.41735177,  0.99811524],\n       ...,\n       [ 1.52832315,  1.78445494,  0.0489154 , ..., -0.59636253,\n         0.09678952, -0.08178022],\n       [-0.3346434 ,  1.86944373, -1.43363515, ..., -0.52507635,\n        -1.17962481, -0.71677493],\n       [ 0.69320022, -0.16735655, -1.12034145, ..., -0.20923899,\n        -1.17550624, -0.19098313]])"},"exec_count":52}},"pos":27.25,"start":1657213917654,"state":"done","type":"cell"}
{"end":1657216406025,"exec_count":63,"id":"df4f11","input":"#importing libraries\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn import preprocessing\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nfrom matplotlib import pyplot as plt\n\nimport seaborn as sns\n\n#function for converting String columns into numbers\ndef stringToInt(dataFrame,col):\n    test = {}\n    for i in dict(enumerate(dataFrame[col].unique())).items():#is a dictionary of the keys and corespodening number\n        #makes it so the keys and values of the dictionary switch\n        test[i[1]]=i[0]\n    print(test,'\\n')\n    return dataFrame[col].map(test)\n\n#converting string columns\ndf['key'] = stringToInt(df,'key')\ndf['mode'] = stringToInt(df,'mode')\ndf['music_genre'] = stringToInt(df,'music_genre')\n\n#histograms of original dataset\nimport matplotlib.colors as mcolors\ncolors = list(mcolors.CSS4_COLORS.keys())[10:]\ndef draw_histograms(dataframe, features, rows, cols):\n    fig=plt.figure(figsize=(20,20))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        dataframe[feature].hist(bins=20,ax=ax,facecolor=colors[i])\n        ax.set_title(feature+\" Histogram\",color=colors[35])\n        ax.set_yscale('log')\n    fig.tight_layout() \n    plt.savefig('Histograms.png')\n    plt.show()\ndraw_histograms(df,df.columns,8,4)\n\n#prepocessing dataset\nX = df.loc[:, df.columns != 'music_genre']\ny = df.music_genre\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5, stratify=y)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\nscaler = preprocessing.StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n#model building\nmodel = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)\ny_pred = model.predict(X_test)\nX_train_acc = model.score(X_train_scaled, y_train)\nprint(\"The Accuracy for Training Set is {}\".format(train_acc*100))\ntest_acc = model.score(X_test_scaled, y_test)\nprint(\"The Accuracy for Test Set is {}\".format(test_acc*100))\nprint(classification_report(y_test, y_pred))\n\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11} \n\n{0: 0, 1: 1} \n\n{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9} \n\n"},"1":{"data":{"image/png":"0585fead9811fca1bc5eff71248689a21a477b05","text/plain":"<Figure size 1440x1440 with 14 Axes>"},"metadata":{"needs_background":"light"}},"2":{"name":"stdout","text":"(40000, 13)\n(10000, 13)\n(40000,)\n(10000,)\n"},"3":{"name":"stdout","text":"The Accuracy for Training Set is 53.2125\nThe Accuracy for Test Set is 52.580000000000005\n              precision    recall  f1-score   support\n\n           0       0.00      0.00      0.00      1000\n           1       0.00      0.00      0.00      1000\n           2       0.00      0.00      0.00      1000\n           3       0.00      0.00      0.00      1000\n           4       0.00      0.00      0.00      1000\n           5       0.00      0.00      0.00      1000\n           6       0.00      0.00      0.00      1000\n           7       0.00      0.00      0.00      1000\n           8       0.10      1.00      0.18      1000\n           9       0.00      0.00      0.00      1000\n\n    accuracy                           0.10     10000\n   macro avg       0.01      0.10      0.02     10000\nweighted avg       0.01      0.10      0.02     10000\n\n"},"4":{"name":"stderr","text":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n  warnings.warn(\n/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n"}},"pos":28,"start":1657216398077,"state":"done","type":"cell"}
{"end":1657216674357,"exec_count":5,"id":"badfcf","input":"#importing libraries\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn import preprocessing\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nfrom matplotlib import pyplot as plt\n\nimport seaborn as sns\n","kernel":"ds_env","pos":29.0009765625,"start":1657216674348,"state":"done","type":"cell"}
{"end":1657216684302,"exec_count":6,"id":"d00978","input":"#function for converting String columns into numbers\ndef stringToInt(dataFrame,col):\n    test = {}\n    for i in dict(enumerate(dataFrame[col].unique())).items():#is a dictionary of the keys and corespodening number\n        #makes it so the keys and values of the dictionary switch\n        test[i[1]]=i[0]\n    print(test,'\\n')\n    return dataFrame[col].map(test)","kernel":"ds_env","pos":29.001953125,"start":1657216684298,"state":"done","type":"cell"}
{"end":1657216700910,"exec_count":8,"id":"af0515","input":"#converting string columns\ndf['key'] = stringToInt(df,'key')\ndf['mode'] = stringToInt(df,'mode')\ndf['music_genre'] = stringToInt(df,'music_genre')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"{'A#': 0, 'D': 1, 'G#': 2, 'C#': 3, 'F#': 4, 'B': 5, 'G': 6, 'F': 7, 'A': 8, 'C': 9, 'E': 10, 'D#': 11} \n\n{'Minor': 0, 'Major': 1} \n\n{'Electronic': 0, 'Anime': 1, 'Jazz': 2, 'Alternative': 3, 'Country': 4, 'Rap': 5, 'Blues': 6, 'Rock': 7, 'Classical': 8, 'Hip-Hop': 9} \n\n"}},"pos":29.00390625,"start":1657216700876,"state":"done","type":"cell"}
{"end":1657216704609,"exec_count":9,"id":"1b54f8","input":"df[\"key\"].head()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0    0\n1    1\n2    2\n3    3\n4    4\nName: key, dtype: int64"},"exec_count":9}},"pos":29.0078125,"start":1657216704603,"state":"done","type":"cell"}
{"end":1657216723633,"exec_count":10,"id":"2d011a","input":"#histograms of original dataset\nimport matplotlib.colors as mcolors\ncolors = list(mcolors.CSS4_COLORS.keys())[10:]\ndef draw_histograms(dataframe, features, rows, cols):\n    fig=plt.figure(figsize=(20,20))\n    for i, feature in enumerate(features):\n        ax=fig.add_subplot(rows,cols,i+1)\n        dataframe[feature].hist(bins=20,ax=ax,facecolor=colors[i])\n        ax.set_title(feature+\" Histogram\",color=colors[35])\n        ax.set_yscale('log')\n    fig.tight_layout() \n    plt.savefig('Histograms.png')\n    plt.show()\ndraw_histograms(df,df.columns,8,4)","kernel":"ds_env","output":{"0":{"data":{"image/png":"0585fead9811fca1bc5eff71248689a21a477b05","text/plain":"<Figure size 1440x1440 with 14 Axes>"},"metadata":{"needs_background":"light"}}},"pos":29.015625,"start":1657216716348,"state":"done","type":"cell"}
{"end":1657216854663,"exec_count":17,"id":"d9a613","input":"\n#prepocessing dataset\nX = df.loc[:, df.columns != 'music_genre']\ny = df.music_genre\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5, stratify=y)\n\n","kernel":"ds_env","pos":29.03125,"start":1657216854598,"state":"done","type":"cell"}
{"end":1657216890330,"exec_count":21,"id":"196d48","input":"y_test","kernel":"ds_env","output":{"0":{"data":{"text/plain":"47911    9\n49459    9\n46341    9\n4868     0\n12902    2\n        ..\n34430    6\n9285     1\n28536    5\n4006     0\n8371     1\nName: music_genre, Length: 10000, dtype: int64"},"exec_count":21}},"pos":29.046875,"start":1657216890317,"state":"done","type":"cell"}
{"end":1657216900363,"exec_count":22,"id":"b8369e","input":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"(40000, 13)\n(10000, 13)\n(40000,)\n(10000,)\n"}},"pos":29.0625,"start":1657216900348,"state":"done","type":"cell"}
{"end":1657217036438,"exec_count":27,"id":"e7ea70","input":"#model building\nmodel = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)\ny_pred = model.predict(X_test_scaled)\nX_train_acc = model.score(X_train_scaled, y_train)\nprint(\"The Accuracy for Training Set is {}\".format(X_train_acc*100))\ntest_acc = model.score(X_test_scaled, y_test)\nprint(\"The Accuracy for Test Set is {}\".format(test_acc*100))\nprint(classification_report(y_test, y_pred))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"The Accuracy for Training Set is 53.2125\nThe Accuracy for Test Set is 52.580000000000005\n              precision    recall  f1-score   support\n\n           0       0.55      0.56      0.55      1000\n           1       0.63      0.63      0.63      1000\n           2       0.47      0.41      0.44      1000\n           3       0.39      0.31      0.34      1000\n           4       0.45      0.58      0.51      1000\n           5       0.47      0.38      0.42      1000\n           6       0.50      0.44      0.47      1000\n           7       0.52      0.65      0.58      1000\n           8       0.77      0.80      0.78      1000\n           9       0.47      0.51      0.49      1000\n\n    accuracy                           0.53     10000\n   macro avg       0.52      0.53      0.52     10000\nweighted avg       0.52      0.53      0.52     10000\n\n"}},"pos":29.25,"start":1657217034419,"state":"done","type":"cell"}
{"end":1657217202383,"exec_count":29,"id":"248d22","input":"sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":29},"1":{"data":{"image/png":"27392acbb9bc92268c5a1f2c6f5eba4dfb6aacdf","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":29.5,"start":1657217201316,"state":"done","type":"cell"}
{"end":1657218997392,"exec_count":30,"id":"36bae3","input":"\n\nX_train.head()\n\n\n\n\n","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>key</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>26455</th>\n      <td>64.0</td>\n      <td>0.051200</td>\n      <td>0.946</td>\n      <td>263914.0</td>\n      <td>0.7720</td>\n      <td>0.000002</td>\n      <td>10</td>\n      <td>0.0612</td>\n      <td>-7.537</td>\n      <td>0</td>\n      <td>0.1210</td>\n      <td>116.97</td>\n      <td>0.7430</td>\n    </tr>\n    <tr>\n      <th>41832</th>\n      <td>30.0</td>\n      <td>0.991000</td>\n      <td>0.203</td>\n      <td>400268.0</td>\n      <td>0.0311</td>\n      <td>0.002510</td>\n      <td>0</td>\n      <td>0.0807</td>\n      <td>-31.284</td>\n      <td>0</td>\n      <td>0.0542</td>\n      <td>102.52</td>\n      <td>0.0345</td>\n    </tr>\n    <tr>\n      <th>21583</th>\n      <td>38.0</td>\n      <td>0.143000</td>\n      <td>0.573</td>\n      <td>197760.0</td>\n      <td>0.9500</td>\n      <td>0.000000</td>\n      <td>1</td>\n      <td>0.2180</td>\n      <td>-3.594</td>\n      <td>1</td>\n      <td>0.0515</td>\n      <td>132.01</td>\n      <td>0.7030</td>\n    </tr>\n    <tr>\n      <th>2629</th>\n      <td>34.0</td>\n      <td>0.000723</td>\n      <td>0.467</td>\n      <td>309577.0</td>\n      <td>0.8300</td>\n      <td>0.017200</td>\n      <td>2</td>\n      <td>0.4060</td>\n      <td>-5.197</td>\n      <td>1</td>\n      <td>0.0574</td>\n      <td>140.03</td>\n      <td>0.0394</td>\n    </tr>\n    <tr>\n      <th>6995</th>\n      <td>26.0</td>\n      <td>0.986000</td>\n      <td>0.270</td>\n      <td>108507.0</td>\n      <td>0.1020</td>\n      <td>0.035200</td>\n      <td>6</td>\n      <td>0.0871</td>\n      <td>-19.713</td>\n      <td>1</td>\n      <td>0.0434</td>\n      <td>115.67</td>\n      <td>0.0427</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       popularity  acousticness  danceability  duration_ms  energy  \\\n26455        64.0      0.051200         0.946     263914.0  0.7720   \n41832        30.0      0.991000         0.203     400268.0  0.0311   \n21583        38.0      0.143000         0.573     197760.0  0.9500   \n2629         34.0      0.000723         0.467     309577.0  0.8300   \n6995         26.0      0.986000         0.270     108507.0  0.1020   \n\n       instrumentalness  key  liveness  loudness  mode  speechiness   tempo  \\\n26455          0.000002   10    0.0612    -7.537     0       0.1210  116.97   \n41832          0.002510    0    0.0807   -31.284     0       0.0542  102.52   \n21583          0.000000    1    0.2180    -3.594     1       0.0515  132.01   \n2629           0.017200    2    0.4060    -5.197     1       0.0574  140.03   \n6995           0.035200    6    0.0871   -19.713     1       0.0434  115.67   \n\n       valence  \n26455   0.7430  \n41832   0.0345  \n21583   0.7030  \n2629    0.0394  \n6995    0.0427  "},"exec_count":30}},"pos":30,"start":1657218997331,"state":"done","type":"cell"}
{"exec_count":24,"id":"941e3b","input":"scaler = preprocessing.StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","kernel":"ds_env","pos":29.125,"state":"done","type":"cell"}
{"id":"8a7173","input":"","pos":6.5,"state":"done","type":"cell"}
{"id":0,"time":1657213974259,"type":"user"}
{"last_load":1657202896628,"type":"file"}