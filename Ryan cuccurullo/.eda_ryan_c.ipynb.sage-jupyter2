{"backend_state":"init","connection_file":"/projects/afffd160-11c4-4b0e-8185-cf29c729cf98/.local/share/jupyter/runtime/kernel-6ab5caef-2f3c-420c-95e7-e3c738cfb983.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4f9dea","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"575d29","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5def63","input":"df.shape()","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7612ff","input":"","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0e83d","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a3dacd","input":"","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bf2412","input":"","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d75473","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"9a5b13","input":"df = df.sort_values(by=[\"acousticness\"])\n\npx.bar(df, x='popularity', y='acousticness', template=\"plotly_dark\",color='music_genre')\n\n# as popularity increases, average acousticness decreases after popularity of 35\n    # as popularity increases to 35, average acousticness increases\n# non popular songs also have low acousticness\n    # popularity of 20 or less have acousticness of below 100\n# know that songs with popularity of 0 have full range of acousticness","output":{"0":{"data":{"iframe":"53302050ed239614a6b913fba22abad405cea9d1"},"exec_count":10,"output_type":"execute_result"}},"pos":38,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":102,"id":"467a58","input":"#histogram showing number of songs per genre\ndf[\"music_genre\"].hist(figsize = (10, 10))","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":102,"output_type":"execute_result"},"1":{"data":{"image/png":"ee8d3ec5f94450e90a46741cbed5fcf83a28b438","text/plain":"<Figure size 720x720 with 1 Axes>"},"exec_count":102,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":25,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":110,"id":"491416","input":"#dropping rows\n#drops rows with duration of less than 0\n#df.drop(df[(df['duration_ms'] < 0)].index,axis=0,inplace=True)","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":110,"id":"88c26f","input":"\naverages = [\n    ('Electronic', 125.78),\n    ('Anime' ,126.69),\n    ('Jazz', 111.61),\n    ('Alternative', 122.4),\n    ('Country', 123.98),\n    ('Rap', 120.43),\n    ('Blues', 121.3),\n    ('Rock', 122.69),\n    ('Classical' ,103.92),\n    ('Hip-Hop', 119.9)\n]\n\nfor i in averages:\n    #checks if a genre has a ? for tempo and replaces it with average for genre\n    df[(df[\"tempo\"] == \"?\") & (df['music_genre']==i[0])] = i[1]\n\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\n\ndf['tempo'].mean()","output":{"0":{"data":{"text/plain":"119.95135952000511"},"exec_count":110,"output_type":"execute_result"}},"pos":11,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":112,"id":"3ced1e","input":"#getting rid of '?' in tempo column\n#df = df.drop(df[df[\"tempo\"] == \"?\"].index)\n#df[\"tempo\"] = df[\"tempo\"].astype(\"float\")\n#df[\"tempo\"] = np.around(df[\"tempo\"], decimals = -2)\n#df = df.sort_values(by=[\"tempo\"])","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":112,"id":"e03ff2","input":"df[(df[\"tempo\"] == \"?\") & (df['music_genre']==\"Electronic\")]","output":{"0":{"data":{"text/plain":"Series([], Name: tempo, dtype: float64)"},"exec_count":112,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"4a11d2","input":"import plotly.figure_factory as ff\nff.create_distplot(df[\"popularity\"], df[\"music_genre\"], bin_size=[.1, .25, .5, 1])","output":{"0":{"ename":"KeyError","evalue":"0","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3621\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:136\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:163\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5198\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5206\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 0","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [15]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mplotly\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfigure_factory\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mff\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m#ff.create_distplot(df[\"popularity\"], df[\"music_genre\"], bin_size=[.1, .25, .5, 1])\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[43mff\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_distplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbin_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m.1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m.25\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m.5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/figure_factory/_distplot.py:180\u001b[0m, in \u001b[0;36mcreate_distplot\u001b[0;34m(hist_data, group_labels, bin_size, curve_type, colors, rug_text, histnorm, show_hist, show_curve, show_rug)\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m rug_text \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    178\u001b[0m     rug_text \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m--> 180\u001b[0m \u001b[43mvalidate_distplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mhist_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcurve_type\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    181\u001b[0m utils\u001b[38;5;241m.\u001b[39mvalidate_equal_length(hist_data, group_labels)\n\u001b[1;32m    183\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(bin_size, (\u001b[38;5;28mfloat\u001b[39m, \u001b[38;5;28mint\u001b[39m)):\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/figure_factory/_distplot.py:32\u001b[0m, in \u001b[0;36mvalidate_distplot\u001b[0;34m(hist_data, curve_type)\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pd:\n\u001b[1;32m     30\u001b[0m     hist_data_types \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (pd\u001b[38;5;241m.\u001b[39mcore\u001b[38;5;241m.\u001b[39mseries\u001b[38;5;241m.\u001b[39mSeries,)\n\u001b[0;32m---> 32\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[43mhist_data\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m, hist_data_types):\n\u001b[1;32m     33\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exceptions\u001b[38;5;241m.\u001b[39mPlotlyError(\n\u001b[1;32m     34\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOops, this function was written \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     35\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mto handle multiple datasets, if \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m[1, 2, 3] -> x = [[1, 2, 3]]\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     40\u001b[0m     )\n\u001b[1;32m     42\u001b[0m curve_opts \u001b[38;5;241m=\u001b[39m (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkde\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnormal\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:3505\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3504\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3505\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3506\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3507\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3623\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3623\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3624\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3625\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3626\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3627\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3628\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: 0"]}},"pos":26,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":188,"id":"60cad3","input":"df[df[\"loudness\"] == 0].head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>key</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n      <th>music_genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3741</th>\n      <td>29.0</td>\n      <td>0.00448</td>\n      <td>0.64</td>\n      <td>172800.0</td>\n      <td>0.999</td>\n      <td>0.11</td>\n      <td>F#</td>\n      <td>0.822</td>\n      <td>0.0</td>\n      <td>Minor</td>\n      <td>0.151</td>\n      <td>99.986</td>\n      <td>0.173</td>\n      <td>Electronic</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      popularity  acousticness  danceability  duration_ms  energy  \\\n3741        29.0       0.00448          0.64     172800.0   0.999   \n\n      instrumentalness key  liveness  loudness   mode  speechiness   tempo  \\\n3741              0.11  F#     0.822       0.0  Minor        0.151  99.986   \n\n      valence music_genre  \n3741    0.173  Electronic  "},"exec_count":188,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"331318","input":"px.scatter_matrix(df, dimensions = [\"loudness\", \"energy\", \"danceability\", \"acousticness\"], color = \"music_genre\", template=\"plotly_dark\")","output":{"0":{"data":{"iframe":"55d6b346f58cd05e9b5727af9b27c5b335a39f31"},"exec_count":20,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"305d86","input":"df = df.sort_values(by=[\"danceability\"])\n\npx.bar(df, x='popularity', y='acousticness', color='music_genre',template=\"plotly_dark\")\n\n# non danceable songs are of the highest acoustecness\n# danceability and popularity are not correlated\n# for each popularity, the least danceable songs tend to have the highest acousticness (at least until about 45 popularity)***","output":{"0":{"data":{"iframe":"1fdb96ca0ed14df07b1cc832f0204bcf1eeb4a37"},"exec_count":21,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"8a719d","input":"\ndf = df.sort_values(by=[\"key\"])\npx.bar(df, x='music_genre', y='tempo',color='key',template=\"plotly_dark\")\n\n# tempo is highest for classical\n# tempo is lowest for electronic\n# clear pattern in tempo per genre","output":{"0":{"data":{"iframe":"61068620d387cd26d890629fc3f170a2d64ab461"},"exec_count":25,"output_type":"execute_result"}},"pos":39,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"0603f6","input":"#imports\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\nimport seaborn as sns\nimport plotly.io as pio\n\n\n#importing datasets\nmusic_data = pd.read_csv(\"music_genre.csv\")\ndf = music_data.copy(deep=True)\ndf.shape\n\n#makes theme dark for all ploty visuals\npio.templates.default = \"plotly_dark\"","pos":1,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"5ce0cd","input":"#dropping null rows\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True) #Very good practice to reset how your rows are counted when you drop rows.\ndf.shape","output":{"0":{"data":{"text/plain":"(50000, 18)"},"exec_count":27,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":271,"id":"0bb222","input":"#music_data = pd.read_csv(\"music_genre.csv\")\n#df = music_data.copy(deep=True)\n\ndf = df.drop(df[df[\"tempo\"] == \"?\"].index)\ndf[\"tempo\"] = df[\"tempo\"].astype(\"float\")\n\ndef getAverage(col,temp):\n    print(\"average of {}\".format(col))\n\n    for i in df['music_genre'].unique():\n        x = df[df['music_genre']==i].copy()\n\n        print(i,round(x[col].mean(),2))\n\ngetAverage('tempo','?')","output":{"0":{"name":"stdout","output_type":"stream","text":"average of tempo\nElectronic 125.78\nAnime 126.69\nJazz 111.61\nAlternative 122.4\nCountry 123.98\nRap 120.43\nBlues 121.3\nRock 122.69\nClassical 103.92\nHip-Hop 119.9\n"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":272,"id":"235cb9","input":"df = df.drop(df[df[\"duration_ms\"] < 0].index)\n\n\ndef getAverage(col):\n    print(\"average of {}\".format(col)) \n\n    for i in df['music_genre'].unique():\n        x = df[df['music_genre']==i].copy()\n        print(i,round(x[col].mean(),2))\ngetAverage('duration_ms')","output":{"0":{"name":"stdout","output_type":"stream","text":"average of duration_ms\nElectronic 269823.29\nAnime 231378.48\nJazz 264350.73\nAlternative 233401.85\nCountry 216708.24\nRap 219015.52\nBlues 253432.84\nRock 237044.9\nClassical 310510.83\nHip-Hop 219770.17\n"}},"pos":16,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":275,"id":"4e524f","input":"#makes it so tempo is in acending order\ndf = df.sort_values(by=[\"tempo\"])\n\npx.scatter(df, x = \"duration_ms\", y = \"tempo\", color = \"music_genre\", template=\"plotly_dark\")\n","output":{"0":{"data":{"iframe":"d7dcdedb86bb333ac68b6911150e8ebc2b9b111a"},"exec_count":275,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":277,"id":"ec2dfa","input":"px.scatter(df, x = \"loudness\", y = \"instrumentalness\", color = \"music_genre\", template=\"plotly_dark\")","output":{"0":{"data":{"iframe":"e2a7302b930bfcae9e745108ce9723484bbe539b"},"exec_count":277,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":278,"id":"74896b","input":"px.scatter(df, x='loudness', y='energy', template=\"plotly_dark\", color='popularity')\n\n# loudness and energy are positively correlated\n# louder songs are more popular\n# higher energy songs are more popular\n# the most popular songs are both loud and energetic\n# maximum loudness and maximum energy decrease popularity","output":{"0":{"data":{"iframe":"795c2b56c857eb337d6b7779f075668c153ef0a0"},"exec_count":278,"output_type":"execute_result"}},"pos":32,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":279,"id":"6b2b5d","input":"px.scatter(df, x = \"danceability\", y = \"loudness\", color = \"music_genre\", template=\"plotly_dark\")","output":{"0":{"data":{"iframe":"4fd072e40b740c975af358757d0450f0eac73028"},"exec_count":279,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"d4934e","input":"#dropping columns\nbadInfo = [\"instance_id\",\"obtained_date\",\"artist_name\",\"track_name\"]\ndf.drop(columns=badInfo,axis=1,inplace=True)","pos":5,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":280,"id":"221d86","input":"px.scatter(df, x='danceability', y='loudness', template=\"plotly_dark\", color='popularity')\n\n# popular songs are around 0 to -15 loudness\n# popular danceable songs are closer to 0 loudness\n# non danceable songs tend to be more unpopular than danceable songs\n# as danceability increases, the loudness compresses","output":{"0":{"data":{"iframe":"6f16fb5adfbac89e8d986a28540b1d6f7752182c"},"exec_count":280,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":285,"id":"8ff5b6","input":"px.scatter(df, x = \"danceability\", y = \"acousticness\", color = \"music_genre\", template=\"plotly_dark\")","output":{"0":{"data":{"iframe":"3242ef595f4232bd67b75da07b03fa88b428565b"},"exec_count":285,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"502fd0","input":"px.scatter_3d(df, x = \"speechiness\", y = \"duration_ms\", z = \"popularity\", color = \"music_genre\", template = \"plotly_dark\")\n\n# alternative and country are extremely similar here\n# rock popularity > 50; duration < 1M; speechiness < .6\n# blues popularity < 50; duration ~< 1M; speechiness < .6\n    # separated by rock by ppularity (and few outliers in popularity and duration)\n# classical has widest range of popularity and comparitively wide range of duration and fairly wide range of speechiness (overall widest ranges)\n\n# distinct genre differences:\n    # Classical vs Hip Hop\n    # Rock vs Blues\n    # Electronic vs Hip Hop\n    # Electronic vs Rock\n    # Alternative vs Classical\n    # Rap vs Classical\n    # Rap vs Rock\n    # Country vs Anime\n    # Jazz vs Hip Hop\n    # Jazz vs Rock\n    # Jazz vs Rap\n    # Anime vs Jazz (?)\n    # Alternative vs Anime\n    # Anime vs Hip Hop","output":{"0":{"data":{"iframe":"b75b02317c77b32793ea83c04adcae0299301687"},"exec_count":30,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"f5cf3f","input":"px.scatter(df, x='danceability', y='acousticness', template=\"plotly_dark\", color='popularity')\n\n# highly popular danceable songs are low acoustic\n# non popular danceable songs are high acoustic\n# overall high acousticness correlates with low popularity and low acousticness correlates with high popularity\n# danceability and acousticness are not correlated","output":{"0":{"data":{"iframe":"c54db1461d31b0c4081ef6e9e778fc01c0e32951"},"exec_count":33,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"337f55","input":"df.columns","output":{"0":{"data":{"text/plain":"Index(['popularity', 'acousticness', 'danceability', 'duration_ms', 'energy',\n       'instrumentalness', 'key', 'liveness', 'loudness', 'mode',\n       'speechiness', 'tempo', 'valence', 'music_genre'],\n      dtype='object')"},"exec_count":34,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d92c27","input":"# CHANGING MILLISECONDS TO SECONDS (in duration_ms)\n\n# df[\"duration_ms\"] = df[\"duration_ms\"] * .001","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"9c4ea9","input":"df.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>popularity</th>\n      <th>acousticness</th>\n      <th>danceability</th>\n      <th>duration_ms</th>\n      <th>energy</th>\n      <th>instrumentalness</th>\n      <th>key</th>\n      <th>liveness</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>tempo</th>\n      <th>valence</th>\n      <th>music_genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>49994</th>\n      <td>56.0</td>\n      <td>0.13300</td>\n      <td>0.849</td>\n      <td>237667.0</td>\n      <td>0.660</td>\n      <td>0.000008</td>\n      <td>C</td>\n      <td>0.296</td>\n      <td>-7.195</td>\n      <td>Major</td>\n      <td>0.0516</td>\n      <td>99.99</td>\n      <td>0.629</td>\n      <td>Hip-Hop</td>\n    </tr>\n    <tr>\n      <th>49996</th>\n      <td>72.0</td>\n      <td>0.15700</td>\n      <td>0.709</td>\n      <td>251860.0</td>\n      <td>0.362</td>\n      <td>0.000000</td>\n      <td>B</td>\n      <td>0.109</td>\n      <td>-9.814</td>\n      <td>Major</td>\n      <td>0.0550</td>\n      <td>122.04</td>\n      <td>0.113</td>\n      <td>Hip-Hop</td>\n    </tr>\n    <tr>\n      <th>49997</th>\n      <td>51.0</td>\n      <td>0.00597</td>\n      <td>0.693</td>\n      <td>189483.0</td>\n      <td>0.763</td>\n      <td>0.000000</td>\n      <td>D</td>\n      <td>0.143</td>\n      <td>-5.443</td>\n      <td>Major</td>\n      <td>0.1460</td>\n      <td>131.08</td>\n      <td>0.395</td>\n      <td>Hip-Hop</td>\n    </tr>\n    <tr>\n      <th>49998</th>\n      <td>65.0</td>\n      <td>0.08310</td>\n      <td>0.782</td>\n      <td>262773.0</td>\n      <td>0.472</td>\n      <td>0.000000</td>\n      <td>G</td>\n      <td>0.106</td>\n      <td>-5.016</td>\n      <td>Minor</td>\n      <td>0.0441</td>\n      <td>75.89</td>\n      <td>0.354</td>\n      <td>Hip-Hop</td>\n    </tr>\n    <tr>\n      <th>49999</th>\n      <td>67.0</td>\n      <td>0.10200</td>\n      <td>0.862</td>\n      <td>267267.0</td>\n      <td>0.642</td>\n      <td>0.000000</td>\n      <td>F#</td>\n      <td>0.272</td>\n      <td>-13.652</td>\n      <td>Minor</td>\n      <td>0.1010</td>\n      <td>99.20</td>\n      <td>0.765</td>\n      <td>Hip-Hop</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       popularity  acousticness  danceability  duration_ms  energy  \\\n49994        56.0       0.13300         0.849     237667.0   0.660   \n49996        72.0       0.15700         0.709     251860.0   0.362   \n49997        51.0       0.00597         0.693     189483.0   0.763   \n49998        65.0       0.08310         0.782     262773.0   0.472   \n49999        67.0       0.10200         0.862     267267.0   0.642   \n\n       instrumentalness key  liveness  loudness   mode  speechiness   tempo  \\\n49994          0.000008   C     0.296    -7.195  Major       0.0516   99.99   \n49996          0.000000   B     0.109    -9.814  Major       0.0550  122.04   \n49997          0.000000   D     0.143    -5.443  Major       0.1460  131.08   \n49998          0.000000   G     0.106    -5.016  Minor       0.0441   75.89   \n49999          0.000000  F#     0.272   -13.652  Minor       0.1010   99.20   \n\n       valence music_genre  \n49994    0.629     Hip-Hop  \n49996    0.113     Hip-Hop  \n49997    0.395     Hip-Hop  \n49998    0.354     Hip-Hop  \n49999    0.765     Hip-Hop  "},"exec_count":60,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"7b722c","input":"# px.imshow([[df[\"popularity\"], df[\"danceability\"], df[\"energy\"]], [df[\"acousticness\"], df[\"liveness\"], df[\"loudness\"]]], text_auto=True)\n\n# px.imshow([[df[\"popularity\"]], [df[\"danceability\"]]])\n\nimport plotly.graph_objects as go\n\n","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"17a781","input":"# visuals:\n\n","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"25717c","input":"# [Markdown Guide cheat Sheet](https://www.markdownguide.org/cheat-sheet/)\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"732736","input":"# editing the table:\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"898bf6","input":"# Fixing duration\\_ms\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"9aa279","input":"# Dropping things:\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"afd69b","input":"# table dimensions, columns, etc.\n\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"bba42e","input":"# Info:\n\n- ### instrumentalness: vocals in a track\n\n- ### speechiness: detects the pressents of vocal words in a track\n\n- ### music genre: 10 different types\n\t1. Electronic\n    2. Classical\n    3. Jazz\n    4. anime\n    5. Rock\n    6. country\n    7. Rap\n    8. Blues\n    9. Hip-Hop\n    10. Alternative\n\n# problems with table:\n\n1. negative duration\n2. missing tempos\n3. rows 10000-10005 are nan values for every column\n4. negative loudness\n\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"c6b9ea","input":"# checking table columns for certain values","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"f9e590","input":"# Fixing Tempo so it has no '?'","pos":9,"type":"cell"}
{"id":0,"time":1657033305810,"type":"user"}
{"last_load":1657029235677,"type":"file"}